{"version":3,"sources":["../../server/models/users.js"],"names":["sequelize","DataTypes","Users","define","username","allowNull","type","STRING","unique","validate","notEmpty","phone","not","email","isEmail","password","hooks","beforeCreate","user","hashPassword","beforeUpdate","_changed","associate","models","belongsToMany","Groups","through","as","foreignKey","prototype","hashSync","genSaltSync","isValidPassword","compareSync","filterUserDetails","id","createdAt"],"mappings":";;;;;;AAAA;;;;;;kBAEe,UAACA,SAAD,EAAYC,SAAZ,EAA0B;AACvC,MAAMC,QAAQF,UAAUG,MAAV,CAAiB,OAAjB,EAA0B;AACtCC,cAAU;AACRC,iBAAW,KADH;AAERC,YAAML,UAAUM,MAFR;AAGRC,cAAQ,IAHA;AAIRC,gBAAU;AACRC,kBAAU;AADF;AAJF,KAD4B;AAStCC,WAAO;AACLN,iBAAW,KADN;AAELC,YAAML,UAAUM,MAFX;AAGLE,gBAAU;AACRG,aAAK,CAAC,OAAD,EAAU,GAAV;AADG;AAHL,KAT+B;AAgBtCC,WAAO;AACLR,iBAAW,KADN;AAELC,YAAML,UAAUM,MAFX;AAGLC,cAAQ,IAHH;AAILC,gBAAU;AACRK,iBAAS;AADD;AAJL,KAhB+B;AAwBtCC,cAAU;AACRV,iBAAW,KADH;AAERC,YAAML,UAAUM,MAFR;AAGRE,gBAAU;AACRC,kBAAU;AADF;AAHF;AAxB4B,GAA1B,EA+BX;AACDM,WAAO;AACLC,kBADK,wBACQC,IADR,EACc;AACjBA,aAAKC,YAAL,CAAkBD,IAAlB;AACD,OAHI;AAILE,kBAJK,wBAIQF,IAJR,EAIc;AAClB;AACC,YAAIA,KAAKG,QAAL,CAAcN,QAAlB,EAA4B;AAC1BG,eAAKC,YAAL,CAAkBD,IAAlB;AACD;AACF;AATI;AADN,GA/BW,CAAd;;AA6CAhB,QAAMoB,SAAN,GAAkB,UAACC,MAAD,EAAY;AAC5BrB,UAAMsB,aAAN,CAAoBD,OAAOE,MAA3B,EAAmC;AACjCC,eAAS,YADwB;AAEjCC,UAAI,QAF6B;AAGjCC,kBAAY;AAHqB,KAAnC;AAKD,GAND;;AAQA;AACA;AACA;AACA;;AAEA1B,QAAM2B,SAAN,CAAgBV,YAAhB,GAA+B,UAACD,IAAD,EAAU;AACvCA,SAAKH,QAAL,GAAgB,uBAAOe,QAAP,CAAgBZ,KAAKH,QAArB,EAA+B,uBAAOgB,WAAP,CAAmB,CAAnB,CAA/B,CAAhB;AACD,GAFD;;AAIA7B,QAAM2B,SAAN,CAAgBG,eAAhB,GAAkC,UAACjB,QAAD,EAAWG,IAAX;AAAA,WAChC,uBAAOe,WAAP,CAAmBlB,QAAnB,EAA6BG,KAAKH,QAAlC,CADgC;AAAA,GAAlC;;AAGAb,QAAM2B,SAAN,CAAgBK,iBAAhB,GAAoC,UAAChB,IAAD,EAAU;AAC5CA,WAAO;AACLiB,UAAIjB,KAAKiB,EADJ;AAEL/B,gBAAUc,KAAKd,QAFV;AAGLS,aAAOK,KAAKL,KAHP;AAILF,aAAOO,KAAKP,KAJP;AAKLyB,iBAAWlB,KAAKkB,SALX,EAAP;AAMA,WAAOlB,IAAP;AACD,GARD;;AAUA,SAAOhB,KAAP;AACD,C","file":"users.js","sourcesContent":["import bcrypt from 'bcrypt-nodejs';\n\nexport default (sequelize, DataTypes) => {\n  const Users = sequelize.define('Users', {\n    username: {\n      allowNull: false,\n      type: DataTypes.STRING,\n      unique: true,\n      validate: {\n        notEmpty: true\n      }\n    },\n    phone: {\n      allowNull: false,\n      type: DataTypes.STRING,\n      validate: {\n        not: ['[a-z]', 'i']\n      }\n    },\n    email: {\n      allowNull: false,\n      type: DataTypes.STRING,\n      unique: true,\n      validate: {\n        isEmail: true\n      }\n    },\n    password: {\n      allowNull: false,\n      type: DataTypes.STRING,\n      validate: {\n        notEmpty: true\n      }\n    }\n  }, {\n    hooks: {\n      beforeCreate(user) {\n        user.hashPassword(user);\n      },\n      beforeUpdate(user) {\n       /* eslint-disable no-underscore-dangle */\n        if (user._changed.password) {\n          user.hashPassword(user);\n        }\n      }\n    }\n  });\n\n  Users.associate = (models) => {\n    Users.belongsToMany(models.Groups, {\n      through: 'GroupUsers',\n      as: 'groups',\n      foreignKey: 'userId'\n    });\n  };\n\n  // this is very uncool but the user parameter has to\n  // be passed to the instance methods to get them working\n  // the normal implementation would be to use \"this\"\n  // unfortunately, \"this\" doesn't work with arrow functions\n\n  Users.prototype.hashPassword = (user) => {\n    user.password = bcrypt.hashSync(user.password, bcrypt.genSaltSync(5));\n  };\n\n  Users.prototype.isValidPassword = (password, user) =>\n    bcrypt.compareSync(password, user.password);\n\n  Users.prototype.filterUserDetails = (user) => {\n    user = {\n      id: user.id,\n      username: user.username,\n      email: user.email,\n      phone: user.phone,\n      createdAt: user.createdAt };\n    return user;\n  };\n\n  return Users;\n};\n"]}