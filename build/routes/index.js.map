{"version":3,"sources":["../../server/routes/index.js"],"names":["app","post","users","createUser","authenticateUser","passwordRequest","updatePassword","token","use","req","res","next","headers","verify","process","env","JWT_TOKEN","err","decoded","status","send","error","message","groups","createGroup","groupUsers","addOrRemoveUser","get","fetchGroups","messages","createMessage","findMessages","fetchCurrentUser","searchUsers","all"],"mappings":";;;;;;AAAA;;;;AACA;;;;;;kBAEe,UAACA,GAAD,EAAS;AACtB;AACAA,MAAIC,IAAJ,CAAS,gBAAT,EAA2B,sBAAYC,KAAZ,CAAkBC,UAA7C;AACAH,MAAIC,IAAJ,CAAS,uBAAT,EAAkC,sBAAYC,KAAZ,CAAkBE,gBAApD;AACA;AACAJ,MAAIC,IAAJ,CAAS,gCAAT,EAA2C,sBAAYC,KAAZ,CAAkBG,eAA7D;AACA;AACAL,MAAIC,IAAJ,CAAS,oCAAT,EACA,sBAAYC,KAAZ,CAAkBI,cADlB;AAEA,MAAIC,cAAJ;AACAP,MAAIQ,GAAJ,CAAQ,UAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC1BJ,YAAQE,IAAIG,OAAJ,CAAY,gBAAZ,CAAR;AACA,2BAAIC,MAAJ,CAAWN,KAAX,EAAkBO,QAAQC,GAAR,CAAYC,SAAZ,IAAyB,QAA3C,EAAqD,UAACC,GAAD,EAAMC,OAAN,EAAkB;AACrE,UAAID,GAAJ,EAAS;AACPP,YAAIS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBC,iBAAO,EAAEC,SAAS,8CAAX;AADY,SAArB;AAGA;AACD;AACD;AACAb,UAAIS,OAAJ,GAAcA,OAAd;AACAP;AACD,KAVD;AAWD,GAbD;;AAeA;AACAX,MAAIC,IAAJ,CAAS,iBAAT,EAA4B,sBAAYsB,MAAZ,CAAmBC,WAA/C;;AAEA;AACAxB,MAAIC,IAAJ,CAAS,0BAAT,EAAqC,sBAAYwB,UAAZ,CAAuBC,eAA5D;;AAEA;AACA1B,MAAI2B,GAAJ,CAAQ,oBAAR,EAA8B,sBAAYJ,MAAZ,CAAmBK,WAAjD;;AAEA;AACA5B,MAAIC,IAAJ,CAAS,6BAAT,EAAwC,sBAAY4B,QAAZ,CAAqBC,aAA7D;;AAEA;AACA9B,MAAI2B,GAAJ,CAAQ,8BAAR,EAAwC,sBAAYJ,MAAZ,CAAmBQ,YAA3D;;AAEA;AACA/B,MAAI2B,GAAJ,CAAQ,mBAAR,EAA6B,sBAAYzB,KAAZ,CAAkB8B,gBAA/C;;AAEA;AACAhC,MAAI2B,GAAJ,CAAQ,oCAAR,EAA8C,sBAAYzB,KAAZ,CAAkB+B,WAAhE;;AAEA;AACAjC,MAAIkC,GAAJ,CAAQ,IAAR,EAAc,UAACzB,GAAD,EAAMC,GAAN;AAAA,WAAcA,IAAIS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC/CC,aAAO,iBADwC;AAE/CF,cAAQ;AAFuC,KAArB,CAAd;AAAA,GAAd;AAID,C","file":"index.js","sourcesContent":["import jwt from 'jsonwebtoken';\nimport controllers from '../controllers';\n\nexport default (app) => {\n  // API routes for users to create accounts and login to the application\n  app.post('/api/v1/users/', controllers.users.createUser);\n  app.post('/api/v1/users/signin/', controllers.users.authenticateUser);\n  // API route to request for new password\n  app.post('/api/v1/users/request-password', controllers.users.passwordRequest);\n  // API route to reset password\n  app.post('/api/v1/users/reset-password/:hash',\n  controllers.users.updatePassword);\n  let token;\n  app.use((req, res, next) => {\n    token = req.headers['x-access-token'];\n    jwt.verify(token, process.env.JWT_TOKEN || 'SECRET', (err, decoded) => {\n      if (err) {\n        res.status(401).send({\n          error: { message: 'user not authenticated, invalid access token' }\n        });\n        return;\n      }\n      // if everything is good, save to request for use in other routes\n      req.decoded = decoded;\n      next();\n    });\n  });\n\n  // API route that allow users create broadcast groups\n  app.post('/api/v1/groups/', controllers.groups.createGroup);\n\n  // API route that allow users add/remove other users to/from groups\n  app.post('/api/v1/groups/:id/user/', controllers.groupUsers.addOrRemoveUser);\n\n  // API route to get list of all groups\n  app.get('/api/v1/groups/:id', controllers.groups.fetchGroups);\n\n  // API route that allows a logged in user post messages to created groups\n  app.post('/api/v1/groups/:id/message/', controllers.messages.createMessage);\n\n  // API route that allows a logged in user retrieve messages from group\n  app.get('/api/v1/groups/:id/messages/', controllers.groups.findMessages);\n\n  // API route that returns current logged in user and their group(s)\n  app.get('/api/v1/users/me/', controllers.users.fetchCurrentUser);\n\n  // API route for search\n  app.get('/api/v1/search/:group/:query/:page', controllers.users.searchUsers);\n\n  // This should always go last\n  app.all('/*', (req, res) => res.status(404).send({\n    error: 'Route not found',\n    status: 404\n  }));\n};\n"]}