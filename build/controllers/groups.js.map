{"version":3,"sources":["../../server/controllers/groups.js"],"names":["createGroup","req","res","body","name","status","send","error","desc","length","Groups","create","admin","decoded","data","id","then","group","userId","GroupUsers","groupId","catch","fetchGroups","isNaN","params","findAll","include","model","Users","through","attributes","as","groups","findOne","where","Messages","message","findMessages","toGroup","order","messages"],"mappings":";;;;;;AAAA;;;;;;kBAEe;AACbA,aADa,uBACDC,GADC,EACIC,GADJ,EACS;AACpB,QAAI,CAACD,IAAIE,IAAJ,CAASC,IAAd,EAAoB;AAClBF,UAAIG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,OAAO,wBAAT,EAAmCF,QAAQ,GAA3C,EAArB;AACA;AACD;AACD,QAAIJ,IAAIE,IAAJ,CAASK,IAAT,KAAkB,EAAtB,EAA0B;AACxBP,UAAIE,IAAJ,CAASK,IAAT,GAAgB,gBAAhB;AACD;AACD,QAAIP,IAAIE,IAAJ,CAASC,IAAT,CAAcK,MAAd,GAAuB,EAA3B,EAA+B;AAC7B,aAAOP,IAAIG,MAAJ,CAAW,GAAX,EACNC,IADM,CACD,EAAEC,OAAO,qBAAT,EAAgCF,QAAQ,GAAxC,EADC,CAAP;AAED;AACD,QAAIJ,IAAIE,IAAJ,CAASK,IAAT,CAAcC,MAAd,GAAuB,EAA3B,EAA+B;AAC7B,aAAOP,IAAIG,MAAJ,CAAW,GAAX,EACNC,IADM,CACD,EAAEC,OAAO,4BAAT,EAAuCF,QAAQ,GAA/C,EADC,CAAP;AAED;AACD,WAAO,iBAAOK,MAAP,CACJC,MADI,CACG;AACNP,YAAMH,IAAIE,IAAJ,CAASC,IADT;AAENI,YAAMP,IAAIE,IAAJ,CAASK,IAFT;AAGNI,aAAOX,IAAIY,OAAJ,CAAYC,IAAZ,CAAiBC;AAHlB,KADH,EAMJC,IANI,CAMC,UAACC,KAAD,EAAW;AACf,UAAMC,SAASjB,IAAIY,OAAJ,CAAYC,IAAZ,CAAiBC,EAAhC;AACA,uBAAOI,UAAP,CACCR,MADD,CACQ,EAAEO,cAAF,EAAUE,SAASH,MAAMF,EAAzB,EADR,EAECC,IAFD,CAEMd,IAAIG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBW,KAArB,CAFN;AAGD,KAXI,EAYJI,KAZI,CAYE;AAAA,aAASnB,IAAIG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBC,KAArB,CAAT;AAAA,KAZF,CAAP;AAaD,GA9BY;AA+Bbe,aA/Ba,uBA+BDrB,GA/BC,EA+BIC,GA/BJ,EA+BS;AACpB,QAAIqB,MAAMtB,IAAIuB,MAAJ,CAAWT,EAAjB,CAAJ,EAA0B;AACxB,aAAOb,IAAIG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,OAAO,iBAAT,EAA4BF,QAAQ,GAApC,EAArB,CAAP;AACD;AACD,QAAI,CAACJ,IAAIuB,MAAJ,CAAWT,EAAhB,EAAoB;AAClB,aAAO,iBAAOL,MAAP,CACNe,OADM,CACE,EAAEC,SAAS,CAAC;AACnBC,iBAAO,iBAAOC,KADK;AAEnBC,mBAAS;AACPC,wBAAY,CAAC,IAAD,EAAO,UAAP;AADL,WAFU;AAKnBC,cAAI;AALe,SAAD;AAAX,OADF,EASNf,IATM,CASD;AAAA,eAAUd,IAAIG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAE0B,cAAF,EAArB,CAAV;AAAA,OATC,EAUNX,KAVM,CAUA;AAAA,eAASnB,IAAIG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBC,KAArB,CAAT;AAAA,OAVA,CAAP;AAWD;;AAED,WAAO,iBAAOG,MAAP,CACNuB,OADM,CACE;AACPC,aAAO,EAAEnB,IAAId,IAAIuB,MAAJ,CAAWT,EAAjB,EADA;AAEPe,kBAAY,CAAC,IAAD,EAAO,MAAP,EAAe,MAAf,EAAuB,OAAvB,CAFL;AAGPJ,eAAS,CAAC;AACRC,eAAO,iBAAOQ,QADN;AAERL,oBACA,CACE,IADF,EAEE,UAFF,EAGE,SAHF,EAIE,WAJF,EAKE,UALF,EAME,QANF,CAHQ;AAWRC,YAAI;AAXI,OAAD,EAaT,EAAEJ,OAAO,iBAAOC,KAAhB;AACEE,oBAAY,CAAC,IAAD,EAAO,UAAP,EAAmB,WAAnB,CADd;AAEED,iBAAS;AACPC,sBAAY;AADL,SAFX;AAKEC,YAAI;AALN,OAbS;AAHF,KADF,EAyBNf,IAzBM,CAyBD,UAACC,KAAD,EAAW;AACf,UAAI,CAACA,KAAL,EAAY;AACV,eAAOf,IAAIG,MAAJ,CAAW,GAAX,EACNC,IADM,CACD,EAAEC,OAAO,sBAAT,EAAiCF,QAAQ,GAAzC,EADC,CAAP;AAED;AACDH,UAAIG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBW,KAArB;AACD,KA/BM,EAgCNI,KAhCM,CAgCA;AAAA,aAASnB,IAAIG,MAAJ,CAAW,GAAX,EACfC,IADe,CACV,EAAEC,OAAOA,MAAM6B,OAAf,EAAwB/B,QAAQ,GAAhC,EADU,CAAT;AAAA,KAhCA,CAAP;AAkCD,GAnFY;AAoFbgC,cApFa,wBAoFApC,GApFA,EAoFKC,GApFL,EAoFU;AACrB,qBAAOiC,QAAP,CACGV,OADH,CACW;AACPS,aAAO,EAAEI,SAAS,CAACrC,IAAIuB,MAAJ,CAAWT,EAAZ,CAAX,EADA;AAEPe,kBAAY,CACV,IADU,EAEV,SAFU,EAGV,UAHU,EAIV,SAJU,EAKV,UALU,EAMV,QANU,CAFL;AAUPS,aAAO,CACL,CAAC,IAAD,EAAO,KAAP,CADK;AAVA,KADX,EAeGvB,IAfH,CAeQ;AAAA,aAAYd,IAAIG,MAAJ,CAAW,GAAX,EACjBC,IADiB,CACZ,EAAEkC,kBAAF,EAAYvB,OAAOhB,IAAIuB,MAAJ,CAAWT,EAA9B,EADY,CAAZ;AAAA,KAfR,EAiBGM,KAjBH,CAiBS;AAAA,aAASnB,IAAIG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,YAAF,EAArB,CAAT;AAAA,KAjBT;AAkBD;AAvGY,C","file":"groups.js","sourcesContent":["import models from '../models';\n\nexport default {\n  createGroup(req, res) {\n    if (!req.body.name) {\n      res.status(400).send({ error: 'Param name is required', status: 400 });\n      return;\n    }\n    if (req.body.desc === '') {\n      req.body.desc = 'no description';\n    }\n    if (req.body.name.length > 30) {\n      return res.status(400)\n      .send({ error: 'Group name too long', status: 400 });\n    }\n    if (req.body.desc.length > 40) {\n      return res.status(400)\n      .send({ error: 'Group description too long', status: 400 });\n    }\n    return models.Groups\n      .create({\n        name: req.body.name,\n        desc: req.body.desc,\n        admin: req.decoded.data.id\n      })\n      .then((group) => {\n        const userId = req.decoded.data.id;\n        models.GroupUsers\n        .create({ userId, groupId: group.id })\n        .then(res.status(201).send(group));\n      })\n      .catch(error => res.status(400).send(error));\n  },\n  fetchGroups(req, res) {\n    if (isNaN(req.params.id)) {\n      return res.status(404).send({ error: 'Route not found', status: 404 });\n    }\n    if (!req.params.id) {\n      return models.Groups\n      .findAll({ include: [{\n        model: models.Users,\n        through: {\n          attributes: ['id', 'username'],\n        },\n        as: 'users'\n      }]\n      })\n      .then(groups => res.status(200).send({ groups }))\n      .catch(error => res.status(400).send(error));\n    }\n\n    return models.Groups\n    .findOne({\n      where: { id: req.params.id },\n      attributes: ['id', 'name', 'desc', 'admin'],\n      include: [{\n        model: models.Messages,\n        attributes:\n        [\n          'id',\n          'fromUser',\n          'message',\n          'createdAt',\n          'priority',\n          'readBy'\n        ],\n        as: 'messages'\n      },\n      { model: models.Users,\n        attributes: ['id', 'username', 'createdAt'],\n        through: {\n          attributes: []\n        },\n        as: 'users'\n      }]\n    })\n    .then((group) => {\n      if (!group) {\n        return res.status(404)\n        .send({ error: 'Group does not exist', status: 404 });\n      }\n      res.status(200).send(group);\n    })\n    .catch(error => res.status(500)\n    .send({ error: error.message, status: 500 }));\n  },\n  findMessages(req, res) {\n    models.Messages\n      .findAll({\n        where: { toGroup: [req.params.id] },\n        attributes: [\n          'id',\n          'message',\n          'fromUser',\n          'toGroup',\n          'priority',\n          'readBy'\n        ],\n        order: [\n          ['id', 'ASC']\n        ]\n      })\n      .then(messages => res.status(200)\n      .send({ messages, group: req.params.id }))\n      .catch(error => res.status(500).send({ error }));\n  }\n};\n"]}