{"version":3,"sources":["../../server/controllers/users.js"],"names":["require","config","newRes","createUser","req","res","Users","findOne","where","username","body","then","foundUsername","status","send","error","email","foundEmail","create","trim","toLowerCase","phone","password","user","save","savedUser","token","filterUserDetails","message","catch","fetchCurrentUser","decoded","data","find","include","model","Groups","as","required","attributes","through","authenticateUser","isValidPassword","id","searchUsers","params","page","findAndCountAll","limit","offset","$iLike","query","$ne","users","pages","Math","ceil","count","rows","searchData","length","n","map","key","push","dataValues","GroupUsers","userId","groupId","group","result","ingroup","updatePassword","PasswordRequests","hash","date","Date","now","toString","split","expiresIn","update","hashSync","genSaltSync","passwordRequest","createHash","process","env","PASSWORD_HASH_SECRET","digest","setHours","getHours","test","NODE_ENV","foundUser","response","subject"],"mappings":"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","file":"users.js","sourcesContent":["import crypto from 'crypto';\nimport bcrypt from 'bcrypt-nodejs';\nimport models from '../models';\nimport { sendMail, validateNewUser, generateToken } from '../helpers';\n\nrequire('dotenv').config();\n\nconst newRes = {};\nexport default {\n  createUser(req, res) {\n    if (validateNewUser(req, res) !== 'valid') {\n      return;\n    }\n    models.Users\n    .findOne({ where: { username: req.body.username } })\n    .then((foundUsername) => {\n      if (foundUsername) {\n        return res.status(409)\n        .send({ error: 'Username already taken', status: 409 });\n      }\n      models.Users\n        .findOne({ where: { email: req.body.email } })\n        .then((foundEmail) => {\n          if (foundEmail) {\n            return res.status(409)\n            .send({ error: 'Email already exists', status: 409 });\n          }\n          return models.Users\n            .create({\n              username: req.body.username.trim().toLowerCase(),\n              phone: req.body.phone.trim(),\n              email: req.body.email.trim().toLowerCase(),\n              password: req.body.password\n            })\n            .then((user) => {\n              user.save()\n                .then((savedUser) => {\n                  const token = generateToken(savedUser);\n                  savedUser = savedUser.filterUserDetails(savedUser);\n                  return res.status(201)\n                  .send({ message: 'Signup success', user: savedUser, token });\n                }).catch((error) => {\n                  res.status(500).send({ error: error.message });\n                });\n            });\n        });\n    });\n  },\n  fetchCurrentUser(req, res) {\n    const username = req.decoded.data.username;\n    models.Users\n    .find({\n      include: [{\n        model: models.Groups,\n        as: 'groups',\n        required: false,\n        attributes: ['id', 'name', 'desc'],\n        through: { attributes: [] }\n      }],\n      where: { username },\n      attributes: ['id', 'email', 'username', 'createdAt']\n    })\n    .then((user) => {\n      if (!user) {\n        return res.status(404)\n        .send({ error: 'User does not exist', status: 404 });\n      }\n      res.status(200).send({ user });\n    });\n  },\n  authenticateUser(req, res) {\n    if (!req.body.username) {\n      return res.status(400)\n      .send({ error: 'Username is required', status: 400 });\n    }\n\n    if (!req.body.password) {\n      return res.status(400)\n      .send({ error: 'Password is required', status: 400 });\n    }\n\n    models.Users\n      .findOne({ where: { username: [req.body.username.toLowerCase()] } })\n      .then((user) => {\n        if (user) {\n          if (user.isValidPassword(req.body.password, user)) {\n            const { username, email, id } = user;\n            const token = generateToken({ username, email, id });\n            return res.status(202).send({\n              token\n            });\n          }\n          return res.status(401)\n          .send({ error: 'Invalid password and username', status: 401 });\n        }\n        res.status(404)\n        .send({ error: 'User does not exist', status: 404 });\n      });\n  },\n  searchUsers(req, res) {\n    if (req.params.page < 0) {\n      return res.status(403)\n      .send({ error: { message: 'Page must be a positive integer' } });\n    }\n    return models.Users\n    .findAndCountAll({\n      limit: 1,\n      offset: req.params.page * 1,\n      where: { username:\n        { $iLike: `%${req.params.query}%`, $ne: req.decoded.data.username } },\n      attributes: ['id', 'username']\n    })\n    .then((users) => {\n      const pages = Math.ceil(users.count / 1);\n      users = users.rows;\n      const searchData = [];\n      if (users.length === 0) {\n        res.status(200).send({ users: searchData, pages });\n      }\n      let n = 0;\n      users.map((user, key) => {\n        searchData.push(user.dataValues);\n        return models.GroupUsers\n        .find({\n          where: { userId: user.id, groupId: req.params.group },\n          attributes: ['userId']\n        }).then((result) => {\n          n += 1;\n          if (result !== null) {\n            searchData[key].ingroup = true;\n          } else {\n            searchData[key].ingroup = false;\n          }\n          if (n === users.length) {\n            res.status(200).send({ users: searchData, pages });\n          }\n        });\n      });\n    })\n    .catch(() => {\n      res.status(500).send({ error: { message: 'Unkown server error' } });\n    });\n  },\n  updatePassword(req, res) {\n    models.PasswordRequests\n    .findOne({\n      where: { hash: req.params.hash }\n    }).then((result) => {\n      if (result) {\n        const email = result.dataValues.email;\n        const date = new Date();\n        const now =\n        `${date.toString().split(' ')[2]}:${date.toString().split(' ')[4]}`;\n        if (now > result.dataValues.expiresIn) {\n          res.status(400).send({ message: 'Link has expired', status: 400 });\n          return;\n        }\n        return models.Users\n        .update(\n          { password:\n            bcrypt.hashSync(req.body.password, bcrypt.genSaltSync(5))\n          },\n          { where: { email } }\n        )\n        .then(() =>\n          res.status(200)\n          .send({ message: 'Password Reset Successful', status: 200 })\n        );\n      }\n      return res.status(400)\n          .send({ message: 'Invalid hash', status: 200 });\n    });\n  },\n  passwordRequest(req, res) {\n    const email = req.body.email;\n    const hash = crypto\n    .createHash('sha256', process.env.PASSWORD_HASH_SECRET)\n    .update(Date.now().toString())\n    .digest('hex');\n    const date = new Date();\n    date.setHours(date.getHours() + 1);\n    const expiresIn\n    = `${date.toString().split(' ')[2]}:${date.toString().split(' ')[4]}`;\n    if (!/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,4})+$/.test(req.body.email)) {\n      return res.status(400)\n      .send({ error: 'Invalid email', status: 400 });\n    }\n    let message = `Hello ${email},\\\n if you have requested for a new password, please follow \\\n <a href='http://localhost:3000/#/new-password/${hash}'> \\\n this link</a> to reset your password`;\n\n    if (process.env.NODE_ENV === 'production') {\n      message = `Hello ${email},\\\n      if you have requested for a new password, please follow \\\n      <a href='https://postit-michael.herokuapp.com/#/new-password/${hash}'> \\\n      this link</a> to reset your password`;\n    }\n\n    models.Users\n    .findOne({\n      where: { email }\n    }).then((foundUser) => {\n      if (!foundUser) {\n        return res.status(404)\n        .send({ error: 'Email does not have an account', status: 404 });\n      }\n      models.PasswordRequests\n      .findOne({\n        where: { email }\n      }).then((response) => {\n        if (!response) {\n          models.PasswordRequests\n          .create({\n            email,\n            expiresIn,\n            hash\n          }).then(() => {\n            sendMail(email, { subject: 'Password Reset Request', message });\n          });\n        } else {\n          response.update({\n            hash,\n            expiresIn\n          }).then(() => {\n            sendMail(email, { subject: 'Password Reset Request', message });\n          });\n        }\n        if (process.env.NODE_ENV === 'test') {\n          return res.status(200)\n          .send({ message: 'Request made', hash, status: 200 });\n        }\n        return res.status(200)\n        .send({ message: 'Request made', status: 200 });\n      });\n    });\n  }\n};\n"]}