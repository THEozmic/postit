{"version":3,"sources":["../../server/controllers/users.js"],"names":["require","config","newRes","createUser","req","res","Users","findOne","where","username","body","then","foundUsername","status","send","error","email","foundEmail","create","trim","toLowerCase","phone","password","user","save","savedUser","token","filterUserDetails","message","catch","fetchAllUsers","findAll","attributes","users","fetchCurrentUser","decoded","data","find","include","model","Groups","as","required","through","groups","length","n","map","group","Messages","toGroup","id","messages","m","dataValues","unreadMessagesCount","readBy","split","count","hasRead","readByUsername","fromUser","authenticateUser","isValidPassword","searchUsers","findAndCountAll","limit","offset","params","page","$iLike","query","$ne","pages","Math","ceil","rows","searchData","key","push","GroupUsers","userId","groupId","result","ingroup","code","success","updatePassword","PasswordRequests","hash","date","Date","now","toString","expiresIn","update","hashSync","genSaltSync","passwordRequest","createHash","process","env","PASSWORD_HASH_SECRET","digest","setHours","getHours","test","foundUser","response","subject","NODE_ENV"],"mappings":"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","file":"users.js","sourcesContent":["import crypto from 'crypto';\nimport bcrypt from 'bcrypt-nodejs';\nimport models from '../models';\nimport { sendMail, validateNewUser, generateToken } from '../helpers';\n\nrequire('dotenv').config();\n\nconst newRes = {};\nexport default {\n  createUser(req, res) {\n    if (validateNewUser(req, res) !== 'valid') {\n      return;\n    }\n    models.Users\n    .findOne({ where: { username: req.body.username } })\n    .then((foundUsername) => {\n      if (foundUsername) {\n        return res.status(409)\n        .send({ error: 'Username already taken', status: 409 });\n      }\n      models.Users\n        .findOne({ where: { email: req.body.email } })\n        .then((foundEmail) => {\n          if (foundEmail) {\n            return res.status(409)\n            .send({ error: 'Email already exists', status: 409 });\n          }\n          return models.Users\n            .create({\n              username: req.body.username.trim().toLowerCase(),\n              phone: req.body.phone.trim(),\n              email: req.body.email.trim().toLowerCase(),\n              password: req.body.password\n            })\n            .then((user) => {\n              user.save()\n                .then((savedUser) => {\n                  const token = generateToken(savedUser);\n                  savedUser = savedUser.filterUserDetails(savedUser);\n                  return res.status(201)\n                  .send({ message: 'Signup success', user: savedUser, token });\n                }).catch((error) => {\n                  res.status(500).send({ error: error.message });\n                });\n            });\n        });\n    });\n  },\n  fetchAllUsers(req, res) {\n    return models.Users\n      .findAll({ attributes:\n        ['id', 'username', 'email', 'phone', 'createdAt', 'updatedAt'] })\n      .then(users => res.status(200).send({ users }));\n  },\n  fetchCurrentUser(req, res) {\n    const username = req.decoded.data.username;\n    models.Users\n    .find({\n      include: [{\n        model: models.Groups,\n        as: 'groups',\n        required: false,\n        attributes: ['id', 'name', 'desc'],\n        through: { attributes: [] }\n      }],\n      where: { username },\n      attributes: ['id', 'email', 'username', 'createdAt']\n    })\n    .then((user) => {\n      if (!user) {\n        return res.status(404)\n        .send({ error: 'User does not exist', status: 404 });\n      }\n      const groups = user.groups;\n      if (!groups) {\n        return res.status(200).send({ data: user });\n      }\n      if (user.groups.length !== 0) {\n        let n = 1;\n        groups.map((group) => {\n          models.Messages\n          .findAll({\n            where: { toGroup: group.id },\n            attributes: ['fromUser', 'readBy']\n          }).then(\n            (messages) => {\n              if (group) {\n                let m = 0;\n                group.dataValues.unreadMessagesCount = 0;\n                if (messages.length === 0) {\n                  if (n === groups.length) {\n                    res.status(200).send({ user });\n                  }\n                } else {\n                  messages.map((message) => {\n                    m += 1;\n                    const readBy = message.readBy.split(',');\n                    let count = 0;\n                    let hasRead = false;\n                    readBy.map((readByUsername) => {\n                      if (readByUsername === req.decoded.data.username) {\n                        hasRead = true;\n                      }\n                      if (message.fromUser === req.decoded.data.username) {\n                        hasRead = true;\n                      }\n                      return readByUsername;\n                    });\n                    if (!hasRead) {\n                      count += 1;\n                    }\n                    group.dataValues.unreadMessagesCount += count;\n                    if (count === 100) {\n                      groups.length = n;\n                      m = groups.length;\n                      count = '99+';\n                      group.dataValues.unreadMessagesCount = count;\n                    }\n                    if (n === groups.length && m === messages.length) {\n                      return res.status(200).send({ user });\n                    }\n                    return message;\n                  });\n                }\n                n += 1;\n              } else {\n                res.status(200).send({ user });\n              }\n            }\n          );\n          return groups;\n        });\n      } else {\n        res.status(200).send({ user });\n      }\n    });\n  },\n  authenticateUser(req, res) {\n    if (!req.body.username) {\n      return res.status(400)\n      .send({ error: 'Username is required', status: 400 });\n    }\n\n    if (!req.body.password) {\n      return res.status(400)\n      .send({ error: 'Password is required', status: 400 });\n    }\n\n    models.Users\n      .findOne({ where: { username: [req.body.username.toLowerCase()] } })\n      .then((user) => {\n        if (user) {\n          if (user.isValidPassword(req.body.password, user)) {\n            const { username, email, id } = user;\n            const token = generateToken({ username, email, id });\n            return res.status(202).send({\n              token\n            });\n          }\n          return res.status(401)\n          .send({ error: 'Invalid password and username', status: 401 });\n        }\n        res.status(404)\n        .send({ error: 'User does not exist', status: 404 });\n      });\n  },\n  searchUsers(req, res) {\n    return models.Users\n    .findAndCountAll({\n      limit: 1,\n      offset: req.params.page * 1,\n      where: { username:\n        { $iLike: `%${req.params.query}%`, $ne: req.decoded.data.username } },\n      attributes: ['id', 'username']\n    })\n    .then((users) => {\n      const pages = Math.ceil(users.count / 1);\n      users = users.rows;\n      const searchData = [];\n      if (users.length === 0) {\n        res.status(200).send({ users: searchData, pages });\n      }\n      let n = 0;\n      users.map((user, key) => {\n        searchData.push(user.dataValues);\n        return models.GroupUsers\n        .find({\n          where: { userId: user.id, groupId: req.params.group },\n          attributes: ['userId']\n        }).then((result) => {\n          n += 1;\n          if (result !== null) {\n            searchData[key].ingroup = true;\n          } else {\n            searchData[key].ingroup = false;\n          }\n          if (n === users.length) {\n            res.status(200).send({ users: searchData, pages });\n          }\n        });\n      });\n    })\n    .catch((error) => {\n      newRes.message = error.message;\n      newRes.code = 400;\n      newRes.success = false;\n      res.status(newRes.code).send();\n    });\n  },\n  updatePassword(req, res) {\n    models.PasswordRequests\n    .findOne({\n      where: { hash: req.params.hash }\n    }).then((result) => {\n      if (result) {\n        const email = result.dataValues.email;\n        const date = new Date();\n        const now =\n        `${date.toString().split(' ')[2]}:${date.toString().split(' ')[4]}`;\n        if (now > result.dataValues.expiresIn) {\n          res.status(400).send({ message: 'Link has expired', status: 400 });\n          return;\n        }\n        return models.Users\n        .update(\n          { password:\n            bcrypt.hashSync(req.body.password, bcrypt.genSaltSync(5))\n          },\n          { where: { email } }\n        )\n        .then(() =>\n          res.status(200)\n          .send({ message: 'Password Reset Successful', status: 200 })\n        );\n      }\n      return res.status(400)\n          .send({ message: 'Invalid hash', status: 200 });\n    });\n  },\n  passwordRequest(req, res) {\n    const email = req.body.email;\n    const hash = crypto\n    .createHash('sha256', process.env.PASSWORD_HASH_SECRET)\n    .update(Date.now().toString())\n    .digest('hex');\n    const date = new Date();\n    date.setHours(date.getHours() + 1);\n    const expiresIn\n    = `${date.toString().split(' ')[2]}:${date.toString().split(' ')[4]}`;\n    if (!/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,4})+$/.test(req.body.email)) {\n      return res.status(400)\n      .send({ error: 'Invalid email', status: 400 });\n    }\n    const message = `Hello ${email},\\\n if you have requested for a new password, please follow \\\n <a href='http://localhost:3000/#/new-password/${hash}'> \\\n this link</a> to reset your password`;\n\n    models.Users\n    .findOne({\n      where: { email }\n    }).then((foundUser) => {\n      if (!foundUser) {\n        return res.status(404)\n        .send({ error: 'Email does not have an account', status: 404 });\n      }\n      models.PasswordRequests\n      .findOne({\n        where: { email }\n      }).then((response) => {\n        if (!response) {\n          models.PasswordRequests\n          .create({\n            email,\n            expiresIn,\n            hash\n          }).then(() => {\n            sendMail(email, { subject: 'Password Reset Request', message });\n          });\n        } else {\n          response.update({\n            hash,\n            expiresIn\n          }).then(() => {\n            sendMail(email, { subject: 'Password Reset Request', message });\n          });\n        }\n        if (process.env.NODE_ENV === 'test') {\n          return res.status(200)\n          .send({ message: 'Request made', hash, status: 200 });\n        }\n        return res.status(200)\n        .send({ message: 'Request made', status: 200 });\n      });\n    });\n  }\n};\n"]}