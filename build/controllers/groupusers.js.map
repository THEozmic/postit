{"version":3,"sources":["../../server/controllers/groupusers.js"],"names":["addOrRemoveUser","req","res","body","usersIds","status","send","error","params","id","Groups","findOne","where","then","foundGroup","message","JSON","parse","map","Users","userFound","GroupUsers","userId","groupId","foundUser","admin","decoded","data","destroy","create"],"mappings":";;;;;;AAAA;;;;;;kBAEe;AACbA,iBADa,2BACGC,GADH,EACQC,GADR,EACa;AACxB,QAAI,CAACD,IAAIE,IAAJ,CAASC,QAAd,EAAwB;AACtB,aAAOF,IAAIG,MAAJ,CAAW,GAAX,EACNC,IADM,CACD,EAAEC,OAAO,4BAAT,EAAuCF,QAAQ,GAA/C,EADC,CAAP;AAED;;AAED,QAAI,CAACJ,IAAIO,MAAJ,CAAWC,EAAhB,EAAoB;AAClB,aAAOP,IAAIG,MAAJ,CAAW,GAAX,EACNC,IADM,CACD,EAAEC,OAAO,+BAAT,EAA0CF,QAAQ,GAAlD,EADC,CAAP;AAED;;AAED,qBAAOK,MAAP,CACCC,OADD,CACS,EAAEC,OAAO,EAAEH,IAAIR,IAAIO,MAAJ,CAAWC,EAAjB,EAAT,EADT,EAECI,IAFD,CAEM,UAACC,UAAD,EAAgB;AACpB,UAAI,CAACA,UAAL,EAAiB;AACf,eAAOZ,IAAIG,MAAJ,CAAW,GAAX,EACNC,IADM,CACD,EAAEC,OAAO,sBAAT,EAAiCF,QAAQ,GAAzC,EADC,CAAP;AAED;AACDH,UAAIG,MAAJ,CAAW,GAAX,EACCC,IADD,CACM,EAAES,SAAS,4BAAX,EAAyCV,QAAQ,GAAjD,EADN;AAED,KATD;;AAWAW,SAAKC,KAAL,CAAWhB,IAAIE,IAAJ,CAASC,QAApB,EAA8Bc,GAA9B,CAAkC;AAAA,UAAGT,EAAH,QAAGA,EAAH;AAAA,aAChC,iBAAOU,KAAP,CAAaR,OAAb,CAAqB,EAAEC,OAAO,EAAEH,MAAF,EAAT,EAArB,EACCI,IADD,CACM,UAACO,SAAD,EAAe;AACnB,YAAIA,SAAJ,EAAe;AACb,2BAAOC,UAAP,CACCV,OADD,CACS,EAAEC,OAAO,EAAEU,QAAQb,EAAV,EAAcc,SAAStB,IAAIO,MAAJ,CAAWC,EAAlC,EAAT,EADT,EAECI,IAFD,CAEM,UAACW,SAAD,EAAe;AACnB,gBAAIA,cAAc,IAAlB,EAAwB;AACtB,+BAAOd,MAAP,CACCC,OADD,CACS,EAAEC,OAAO,EAAEH,IAAIR,IAAIO,MAAJ,CAAWC,EAAjB,EAAT,EADT,EAECI,IAFD,CAEM,UAACC,UAAD,EAAgB;AACpB,oBAAIA,WAAWW,KAAX,KAAqBxB,IAAIyB,OAAJ,CAAYC,IAAZ,CAAiBlB,EAA1C,EAA8C;AAC5C,yBAAO,iBAAOY,UAAP,CACNO,OADM,CACE,EAAEhB,OAAO,EAAEU,QAAQb,EAAV,EAAcc,SAAStB,IAAIO,MAAJ,CAAWC,EAAlC,EAAT,EADF,CAAP;AAED;AACF,eAPD;AAQD,aATD,MASO;AACL,+BAAOY,UAAP,CAAkBQ,MAAlB,CAAyB,EAAEP,QAAQb,EAAV,EAAcc,SAAStB,IAAIO,MAAJ,CAAWC,EAAlC,EAAzB;AACD;AACF,WAfD;AAgBD;AACF,OApBD,CADgC;AAAA,KAAlC;AAuBD;AA9CY,C","file":"groupusers.js","sourcesContent":["import models from '../models';\n\nexport default {\n  addOrRemoveUser(req, res) {\n    if (!req.body.usersIds) {\n      return res.status(400)\n      .send({ error: 'Param: \"users\" is required', status: 400 });\n    }\n\n    if (!req.params.id) {\n      return res.status(400)\n      .send({ error: 'Param: \"group_id\" is required', status: 400 });\n    }\n\n    models.Groups\n    .findOne({ where: { id: req.params.id } })\n    .then((foundGroup) => {\n      if (!foundGroup) {\n        return res.status(404)\n        .send({ error: 'Group does not exist', status: 404 });\n      }\n      res.status(200)\n      .send({ message: 'Group members list updated', status: 200 });\n    });\n\n    JSON.parse(req.body.usersIds).map(({ id }) =>\n      models.Users.findOne({ where: { id } })\n      .then((userFound) => {\n        if (userFound) {\n          models.GroupUsers\n          .findOne({ where: { userId: id, groupId: req.params.id } })\n          .then((foundUser) => {\n            if (foundUser !== null) {\n              models.Groups\n              .findOne({ where: { id: req.params.id } })\n              .then((foundGroup) => {\n                if (foundGroup.admin === req.decoded.data.id) {\n                  return models.GroupUsers\n                  .destroy({ where: { userId: id, groupId: req.params.id } });\n                }\n              });\n            } else {\n              models.GroupUsers.create({ userId: id, groupId: req.params.id });\n            }\n          });\n        }\n      })\n    );\n  }\n};\n"]}