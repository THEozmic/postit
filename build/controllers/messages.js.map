{"version":3,"sources":["../../server/controllers/messages.js"],"names":["fetchMembersDetails","groupId","userId","Promise","resolve","reject","Groups","findOne","where","id","attributes","then","groups","getUsers","$ne","users","catch","error","createMessage","req","res","body","message","status","send","priority","undefined","toLowerCase","GroupUsers","decoded","data","params","foundUserInGroup","foundGroup","split","toUpperCase","join","Messages","create","fromUser","username","toGroup","nexmo","apiKey","process","env","NEXMO_API_KEY","apiSecret","NEXMO_API_SECRET","length","map","user","subject","email","sendSms","phone"],"mappings":"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","file":"messages.js","sourcesContent":["import Nexmo from 'nexmo';\nimport models from '../models';\nimport sendMail from '../helpers/sendMail';\n\n/**\n * @return {promise} array of users and their emails\n * @param {int} groupId\n * @param {int} userId\n */\nfunction fetchMembersDetails(groupId, userId) {\n  return new Promise((resolve, reject) => {\n    models.Groups\n    .findOne({\n      where: {\n        id: groupId\n      },\n      attributes: ['id']\n    }).then((groups) => {\n      if (groups !== null) {\n         // Here, I am getting all the groups and leveraging my associations\n        // to 'getUsers' in that groups, including\n        // their emails, which is what I need\n        groups.getUsers({ attributes: ['email', 'phone'],\n          where: { id: { $ne: userId } } }).then((users) => {\n            resolve(users);\n          })\n        .catch(error => reject(error));\n      }\n    })\n    .catch(error => reject(error));\n  });\n}\n\nexport default {\n  createMessage(req, res) {\n    if (!req.body.message) {\n      return res.status(400)\n      .send({ error: 'Param message is required', status: 400 });\n    }\n\n    if (req.body.priority !== undefined &&\n      req.body.priority.toLowerCase() !== 'urgent'\n      && req.body.priority.toLowerCase() !== 'critical'\n      && req.body.priority.toLowerCase() !== 'normal') {\n      return res.status(400)\n      .send({ error: 'Invalid priority level', status: 400 });\n    }\n\n    models.GroupUsers\n    .findOne({\n      where: { userId: req.decoded.data.id, groupId: req.params.id }\n    }).then((foundUserInGroup) => {\n      if (!foundUserInGroup) {\n        return res.status(401)\n        .send({ error: 'User does not belong to group', status: 401 });\n      }\n      models.Groups\n      .findOne({\n        where: { id: req.params.id }\n      }).then((foundGroup) => {\n        if (!foundGroup) {\n          return res.status(404)\n          .send({ error: 'Group does not exist', status: 404 });\n        }\n        if (req.body.priority) {\n          req.body.priority = req.body.priority.split('');\n          req.body.priority[0] = req.body.priority[0].toUpperCase();\n          req.body.priority = req.body.priority.join('');\n        }\n        return models.Messages\n        .create({\n          message: req.body.message,\n          fromUser: req.decoded.data.username,\n          toGroup: req.params.id,\n          priority: req.body.priority\n        })\n        .then((message) => {\n          res.status(201).send({ message });\n          // Nexmo credentials\n          const nexmo = new Nexmo({\n            apiKey: process.env.NEXMO_API_KEY || 'jhkn',\n            apiSecret: process.env.NEXMO_API_SECRET || 'khnjn'\n          });\n\n          // I'm now going to send the sms and\n          // emails depending on the level of priority\n          if (req.body.priority && req.body.priority\n            .toLowerCase() === 'critical') {\n            return fetchMembersDetails(req.params.id, req.decoded.data.id)\n            .then((users) => {\n              if (users.length !== 0) {\n                users.map((user) => {\n                  // send email\n                  const subject =\n                  'POSTIT: You have a message marked as critical';\n                  sendMail(user.email, { subject, message: req.body.message });\n                  // and sms\n                  nexmo.message.sendSms(\n                    '2347010346915',\n                    user.phone,\n                    `POSTIT: You have a message marked\\\n    as ${req.body.priority.toUpperCase()}\\n${req.body.fromUser}:\\\n     ${req.body.message}\n                    `);\n                  return user;\n                });\n              }\n            });\n          }\n\n          if (req.body.priority && req.body.priority\n            .toLowerCase() === 'urgent') {\n            return fetchMembersDetails(req.params.id, req.decoded.data.id)\n            .then((users) => {\n              if (users.length !== 0) {\n                users.map((user) => {\n                  const subject = 'POSTIT: You have a message marked as urgent';\n                  sendMail(user.email, { subject, message });\n                  return user;\n                });\n              }\n            });\n          }\n        })\n        .catch((error) => {\n          res.status(500).send({ error: error.message });\n        });\n      });\n    });\n  }\n};\n"]}