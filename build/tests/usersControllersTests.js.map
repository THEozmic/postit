{"version":3,"sources":["../../server/tests/usersControllersTests.js"],"names":["require","config","process","env","NODE_ENV","should","use","token","Users","destroy","cascade","truncate","restartIdentity","Messages","Groups","GroupUsers","describe","it","done","request","post","type","send","email","username","password","phone","end","err","res","have","status","body","error","equal","get","set","user"],"mappings":"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","file":"usersControllersTests.js","sourcesContent":["import chaiHttp from 'chai-http';\nimport chai from 'chai';\nimport app from '../app';\nimport models from '../models';\n\nrequire('dotenv').config();\n\nprocess.env.NODE_ENV = 'test';\nconst should = chai.should();\nchai.use(chaiHttp);\nlet token;\n\nmodels.Users.destroy({\n  cascade: true,\n  truncate: true,\n  restartIdentity: true\n});\n\nmodels.Messages.destroy({\n  cascade: true,\n  truncate: true,\n  restartIdentity: true\n});\n\nmodels.Groups.destroy({\n  cascade: true,\n  truncate: true,\n  restartIdentity: true\n});\n\nmodels.GroupUsers.destroy({\n  cascade: true,\n  truncate: true,\n  restartIdentity: true\n});\n\ndescribe('usersControllersTests ', () => {\n  describe('Given the user hits the route POST /api/v1/users/', () => {\n    it('It returns a 201 status when given correct parameters', (done) => {\n      chai.request(app)\n        .post('/api/v1/users')\n        .type('form')\n        .send({\n          email: 'testuser@email.com',\n          username: 'testuser',\n          password: 'testuser',\n          phone: '09004839432'\n        })\n        .end((err, res) => {\n          res.should.have.status(201);\n          token = res.body.token;\n          done();\n        });\n    });\n    it('It returns 400 error when password parameter is not given', (done) => {\n      chai.request(app)\n        .post('/api/v1/users/')\n        .type('form')\n        .send({\n          username: 'testusername',\n          email: 'test@user.com',\n          phone: '07010346915'\n        })\n        .end((err, res) => {\n          res.should.have.status(400);\n          done();\n        });\n    });\n    it('It returns 400 error without username parameter', (done) => {\n      chai.request(app)\n        .post('/api/v1/users/')\n        .type('form')\n        .send({\n          password: 'testpassword',\n          email: 'test@user.com',\n          phone: '07010346915'\n        })\n        .end((err, res) => {\n          res.should.have.status(400);\n          done();\n        });\n    });\n    it('It returns 400 error without email parameter', (done) => {\n      chai.request(app)\n        .post('/api/v1/users/')\n        .type('form')\n        .send({\n          password: 'testpassword',\n          username: 'testusername',\n          phone: '07010346915'\n        })\n        .end((err, res) => {\n          res.should.have.status(400);\n          done();\n        });\n    });\n    it('It returns 400 error without phone parameter', (done) => {\n      chai.request(app)\n        .post('/api/v1/users/')\n        .type('form')\n        .send({\n          password: 'testpassword',\n          username: 'testusername2',\n          email: 'test@user2.com'\n        })\n        .end((err, res) => {\n          res.should.have.status(400);\n          done();\n        });\n    });\n    it('It returns 409 error with duplicate email', (done) => {\n      chai.request(app)\n        .post('/api/v1/users/')\n        .type('form')\n        .send({\n          password: 'testpassword',\n          username: 'testusername3',\n          email: 'testuser@email.com',\n          phone: '07010346915'\n        })\n        .end((err, res) => {\n          res.should.have.status(409);\n          done();\n        });\n    });\n    it('It returns 409 error with duplicate username', (done) => {\n      chai.request(app)\n        .post('/api/v1/users/')\n        .type('form')\n        .send({\n          password: 'testuser',\n          username: 'testuser',\n          email: 'test@user3.com',\n          phone: '07010346915'\n        })\n        .end((err, res) => {\n          res.should.have.status(409);\n          done();\n        });\n    });\n    it('It returns 400 error with invalid email', (done) => {\n      chai.request(app)\n        .post('/api/v1/users/')\n        .type('form')\n        .send({\n          password: 'testpassword',\n          username: 'testusername3',\n          email: 'test',\n          phone: '07010346915'\n        })\n        .end((err, res) => {\n          res.should.have.status(400);\n          done();\n        });\n    });\n    it('It returns 400 error with empty password', (done) => {\n      chai.request(app)\n        .post('/api/v1/users/')\n        .type('form')\n        .send({\n          password: '       ',\n          username: 'testusername5',\n          email: 'test@user5.com',\n          phone: '07010346915'\n        })\n        .end((err, res) => {\n          res.should.have.status(400);\n          done();\n        });\n    });\n    it('It returns 400 error with empty username', (done) => {\n      chai.request(app)\n        .post('/api/v1/users/')\n        .type('form')\n        .send({\n          password: 'testpass',\n          username: '     ',\n          email: 'test@user4.com',\n          phone: '07010346915'\n        })\n        .end((err, res) => {\n          res.should.have.status(400);\n          done();\n        });\n    });\n    it('It returns 400 error with empty email', (done) => {\n      chai.request(app)\n        .post('/api/v1/users/')\n        .type('form')\n        .send({\n          password: 'testpass',\n          username: 'testusername3',\n          email: '     ',\n          phone: '07010346915'\n        })\n        .end((err, res) => {\n          res.should.have.status(400);\n          done();\n        });\n    });\n    it('It returns 400 error with empty phone', (done) => {\n      chai.request(app)\n        .post('/api/v1/users/')\n        .type('form')\n        .send({\n          password: 'testpass',\n          username: 'testusername6',\n          email: 'test@email6.com',\n          phone: '        '\n        })\n        .end((err, res) => {\n          res.should.have.status(400);\n          done();\n        });\n    });\n  });\n\n  describe('Register a new user returns correct error message', () => {\n    it('It returns 400 error without password parameter', (done) => {\n      chai.request(app)\n        .post('/api/v1/users/')\n        .type('form')\n        .send({\n          username: 'testusername',\n          email: 'test@user.com',\n          phone: '07010346915'\n        })\n        .end((err, res) => {\n          res.body.error.should.equal('Password cannot be empty');\n          done();\n        });\n    });\n    it('It returns 400 error without username parameter', (done) => {\n      chai.request(app)\n        .post('/api/v1/users/')\n        .type('form')\n        .send({\n          password: 'testpassword',\n          email: 'test@user.com',\n          phone: '07010346915'\n        })\n        .end((err, res) => {\n          res.body.error.should.equal('Username cannot be empty');\n          done();\n        });\n    });\n    it('It returns 400 error without email parameter', (done) => {\n      chai.request(app)\n        .post('/api/v1/users/')\n        .type('form')\n        .send({\n          password: 'testpassword',\n          username: 'testusername',\n          phone: '07010346915'\n        })\n        .end((err, res) => {\n          res.body.error.should.equal('Invalid email');\n          done();\n        });\n    });\n    it('It 400 error without phone parameter', (done) => {\n      chai.request(app)\n        .post('/api/v1/users/')\n        .type('form')\n        .send({\n          password: 'testpassword',\n          username: 'testusername2',\n          email: 'test@user2.com'\n        })\n        .end((err, res) => {\n          res.body.error.should.equal('Phone cannot be empty');\n          done();\n        });\n    });\n    it('It returns 409 error with duplicate email', (done) => {\n      chai.request(app)\n        .post('/api/v1/users/')\n        .type('form')\n        .send({\n          password: 'testuser2',\n          username: 'testuser2',\n          email: 'testuser@email.com',\n          phone: '07010346915'\n        })\n        .end((err, res) => {\n          res.body.error.should.equal('Email already exists');\n          done();\n        });\n    });\n    it('It returns 409 error with duplicate username', (done) => {\n      chai.request(app)\n        .post('/api/v1/users/')\n        .type('form')\n        .send({\n          password: 'testuser',\n          username: 'testuser',\n          email: 'test@user3.com',\n          phone: '07010346915'\n        })\n        .end((err, res) => {\n          res.body.error.should.equal('Username already taken');\n          done();\n        });\n    });\n    it('It returns 400 error with invalid email', (done) => {\n      chai.request(app)\n        .post('/api/v1/users/')\n        .type('form')\n        .send({\n          password: 'testpassword',\n          username: 'testusername3',\n          email: 'test',\n          phone: '07010346915'\n        })\n        .end((err, res) => {\n          res.body.error.should.equal('Invalid email');\n          done();\n        });\n    });\n    it('It returns 400 error with empty password', (done) => {\n      chai.request(app)\n        .post('/api/v1/users/')\n        .type('form')\n        .send({\n          password: '     ',\n          username: 'testusername',\n          email: 'test@user3.com',\n          phone: '07010346915'\n        })\n        .end((err, res) => {\n          res.body.error.should.equal('Password cannot be empty');\n          done();\n        });\n    });\n    it('It returns 400 error with empty username', (done) => {\n      chai.request(app)\n        .post('/api/v1/users/')\n        .type('form')\n        .send({\n          password: 'testpass',\n          username: '     ',\n          email: 'test@user3.com',\n          phone: '07010346915'\n        })\n        .end((err, res) => {\n          res.should.have.status(400);\n          done();\n        });\n    });\n    it('It returns 400 error with empty email', (done) => {\n      chai.request(app)\n        .post('/api/v1/users/')\n        .type('form')\n        .send({\n          password: 'testpass',\n          username: 'testusername3',\n          email: '     ',\n          phone: '07010346915'\n        })\n        .end((err, res) => {\n          res.body.error.should.equal('Invalid email');\n          done();\n        });\n    });\n    it('It returns 400 error with empty phone', (done) => {\n      chai.request(app)\n        .post('/api/v1/users/')\n        .type('form')\n        .send({\n          password: 'testpass',\n          username: 'testusername3',\n          email: 'test@email3.com',\n          phone: '     '\n        })\n        .end((err, res) => {\n          res.body.error.should.equal('Phone cannot be empty');\n          done();\n        });\n    });\n  });\n\n  describe('Make a password reset request', () => {\n    it('Returns 200 status code when the parameters are correct', (done) => {\n      chai.request(app)\n        .post('/api/v1/users/request-password')\n        .type('form')\n        .send({\n          email: 'testuser@email.com'\n        })\n        .end((err, res) => {\n          res.should.have.status(200);\n          done();\n        });\n    });\n\n    it('Returns 200 status code when request is remade', (done) => {\n      chai.request(app)\n        .post('/api/v1/users/request-password')\n        .type('form')\n        .send({\n          email: 'testuser@email.com'\n        })\n        .end((err, res) => {\n          res.should.have.status(200);\n          done();\n        });\n    });\n\n    it('Returns 404 status code when request is made with not existent email',\n    (done) => {\n      chai.request(app)\n        .post('/api/v1/users/request-password')\n        .type('form')\n        .send({\n          email: 'testuserr@email.com'\n        })\n        .end((err, res) => {\n          res.should.have.status(404);\n          done();\n        });\n    });\n\n    it('Returns 400 status code with invalid email', (done) => {\n      chai.request(app)\n        .post('/api/v1/users/request-password')\n        .type('form')\n        .send({\n          email: 'mail@.com'\n        })\n        .end((err, res) => {\n          res.should.have.status(400);\n          done();\n        });\n    });\n\n    it('Returns 400 status code with empty email', (done) => {\n      chai.request(app)\n        .post('/api/v1/users/request-password')\n        .type('form')\n        .send({\n        })\n        .end((err, res) => {\n          res.should.have.status(400);\n          done();\n        });\n    });\n  });\n\n  describe('View current logged user', () => {\n    it('gets current logged in user data when request is correctly made',\n    (done) => {\n      chai.request(app)\n      .get('/api/v1/users/me/')\n      .set('x-access-token', token)\n      .type('form')\n      .send()\n      .end((err, res) => {\n        res.should.have.status(200);\n        res.body.user.username.should.equal('testuser');\n        done();\n      });\n    });\n  });\n\n  describe('Login a user', () => {\n    it('works with complete parameters', (done) => {\n      chai.request(app)\n        .post('/api/v1/users/signin/')\n        .type('form')\n        .send({\n          password: 'testuser',\n          username: 'testuser'\n        })\n        .end((err, res) => {\n          res.should.have.status(202);\n          done();\n        });\n    });\n  });\n});\n"]}